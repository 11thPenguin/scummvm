/* generated by po2c 1.0.2 - Do not modify */

#include <stdio.h>
#include <string.h>

static const char * _po2c_msgids[] = {
	NULL
};

struct _po2c_msg {
	int msgid;
	const char * msgstr;
};

static struct {
	const char * lang;
	const char * charset;
	struct _po2c_msg * msgs;
} _po2c_langs[] = {
	{ NULL, NULL, NULL }
};

// code

static const PoMessageEntry *_currentTranslation = NULL;
static int _currentTranslationMessageEntryCount = 0;
static const char *_currentTranslationCharset = NULL;

void po2c_setlang(const char *lang) {
	_currentTranslation = NULL;
	_currentTranslationMessageEntryCount = 0;
	_currentTranslationCharset = NULL;

	// if lang is NULL or "", deactivate it
	if (lang == NULL || *lang == '\0')
		return;

	// searches for a valid language array
	for (int i = 0; _currentTranslation == NULL && _translations[i].lang != NULL; ++i) {
		if (strcmp(lang, _translations[i].lang) == 0) {
			_currentTranslation = _translations[i].msgs;
			_currentTranslationCharset = _translations[i].charset;
		}
	}

	// try partial searches
	for (int i = 0; _currentTranslation == NULL && _translations[i].lang != NULL; ++i) {
		if (strncmp(lang, _translations[i].lang, 2) == 0) {
			_currentTranslation = _translations[i].msgs;
			_currentTranslationCharset = _translations[i].charset;
		}
	}

	// if found, count entries
	if (_currentTranslation != NULL) {
		for (const PoMessageEntry *m = _currentTranslation; m->msgid != -1; ++m)
			++_currentTranslationMessageEntryCount;
	}
}

const char *po2c_gettext(const char *msgid) {
	// if no language is set or msgid is empty, return msgid as is
	if (_currentTranslation == NULL || *msgid == '\0')
		return msgid;

	// binary-search for the msgid
	int leftIndex = 0;
	int rightIndex = _currentTranslationMessageEntryCount - 1;

	while (rightIndex >= leftIndex) {
		const int midIndex = (leftIndex + rightIndex) / 2;
		const PoMessageEntry * const m = &_currentTranslation[midIndex];

		const int compareResult = strcmp(msgid, _messageIds[m->msgid]);

		if (compareResult == 0)
			return m->msgstr;
		else if (compareResult < 0)
			rightIndex = midIndex - 1;
		else
			leftIndex = midIndex + 1;
	}

	return msgid;
}

const char *po2c_getcharset(void) {
	if (_currentTranslationCharset)
		return _currentTranslationCharset;
	else
		return "ASCII";
}

int po2c_getnumlangs(void) {
	return ARRAYSIZE(_translations) - 1;
}

const char *po2c_getlang(const int num) {
	assert(num < ARRAYSIZE(_translations));
	return _translations[num].lang;
}
